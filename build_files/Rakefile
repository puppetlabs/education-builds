require 'erb'
require 'uri'
require 'net/http'
require 'net/https'
require 'rubygems'
require 'yaml'
require 'open-uri'

STDOUT.sync = true
BASEDIR = File.dirname(__FILE__)
PTBVERSION = YAML.load_file(File.join(BASEDIR, 'version.yaml'))
PE_VERSION = ENV['PE_VERSION']
PRE_RELEASE = ENV['PE_RELEASE'] == 'true'
PE_FAMILY = ENV['PE_FAMILY']
STABLE = ENV['STABLE']

hostname = `hostname -s`.chomp
if ENV['VM_TYPE'] then
  VM_TYPE = ENV['VM_TYPE']
elsif hostname =~ /^(master|training|learning|student|ciab|demo)$/ then
  VM_TYPE = hostname
else
  abort("ERROR: Unrecognized VM_TYPE parameter: #{VM_TYPE}")
end

# Pass in the number of student VMs to create when operating in
# classroom-in-a-box mode
if VM_TYPE == "ciab" then
  if ENV['NUM_WIN_VMS'] then
    NUM_WIN_VMS = ENV['NUM_WIN_VMS']
  else
    NUM_WIN_VMS = 0
  end
  if ENV['OFFLINE'] then
    OFFLINE = true
  else
    OFFLINE = false
  end
  FACTER_VAR="FACTER_num_win_vms=#{NUM_WIN_VMS} FACTER_offline=#{OFFLINE}"
else
  FACTER_VAR=""
end

##############################################################
#                                                            #
# Methods to abstract the environment variable CL interface. #
#                                                            #
##############################################################

## The site directory and subdirectories are used by the shipping tasks
def site_dir
  ENV['SITE_DIR'] || '/srv/builder/Sites'
end

def cache_dir
  File.join(site_dir, 'cache')
end

def build_dir
  File.join(site_dir, 'build')
end

def ovf_dir
  File.join(site_dir, 'ovf')
end

def src_dir
  ENV['SRC_DIR'] || '/usr/src'
end

def facter_version
  ENV['FACTER_VERSION'] || '3.1.2'
end

def hiera_version
  ENV['HIERA_VERSION'] || '3.0.5'
end

def host_os
  `uname -s`
end


##########################
#                        #
# General helper methods #
#                        #
##########################

def cputs(string)
  puts "\033[1m#{string}\033[0m"
end

def cprint(string)
  print "\033[1m#{string}\033[0m"
end

#################################################
#                                               #
# Helper methods for the Install PE Master task #
#                                               #
#################################################

# At some point we might modify this method to specify dist, release, and arch
def installer_filename
  "puppet-enterprise-#{PE_VERSION}-el-7-x86_64.tar.gz"
end

def pe_installer_url
  if PRE_RELEASE
    "http://enterprise.delivery.puppetlabs.net/#{PE_FAMILY}/ci-ready/#{installer_filename}"
  else
    "https://s3.amazonaws.com/pe-builds/released/#{PE_VERSION}/#{installer_filename}"
  end
end

def installer_path
  "/training/file_cache/installers/#{installer_filename}"
end

def installer_dest
  if VM_TYPE == "training"
    "/root/puppet-enterprise"
  else
    "/tmp/puppet-enterprise"
  end
end

# Download the installer. Curl is nicer than re-inventing the wheel with ruby.
def download_installer
  unless installer_cached?
    puts "Downloading Puppet Enterprise"
    unless `curl #{pe_installer_url} -o #{installer_path}`
      fail "Error downloading the PE installer"
    end
  end
  puts "Untaring PE installer to #{installer_dest}"
  %x{mkdir #{installer_dest}}
  %x{tar xf #{installer_path} -C #{installer_dest} --strip-components=1}
end

# Check if the installer exists and the file isn't empty.
def installer_cached?
  File.exist?(installer_path) and File.zero?(installer_path) == false
end

def write_answers_file
  hostname = VM_TYPE
  File.open('/tmp/answers','w') do |f|
    f.write ERB.new(File.read('./templates/answers.erb')).result(binding)
  end
end

def write_pe_conf_file
  hostname = VM_TYPE
  File.open('/tmp/pe.conf','w') do |f|
    f.write ERB.new(File.read('./templates/pe.conf.erb')).result(binding)
  end
end

def install_pe
  if Gem::Version.new(PE_VERSION.split('-')[0]) < Gem::Version.new('2016.2.0')
    write_answers_file
    puts "Installing Puppet Enterprise with answers file for version #{PE_VERSION}"
    %x{#{installer_dest}/puppet-enterprise-installer -D -a /tmp/answers}
  else
    write_pe_conf_file
    puts "Installing Puppet Enterprise with pe.conf for version #{PE_VERSION}"
    %x{#{installer_dest}/puppet-enterprise-installer -D -c /tmp/pe.conf}
  end
end

########################################
#                                      #
# Helper methods for pre-install tasks #
#                                      #
########################################

def set_hostname
  # Set the dns info and hostname; must be done before puppet
  cputs "Setting hostname #{VM_TYPE}.puppetlabs.vm"
  %x{hostname #{VM_TYPE}.puppetlabs.vm}
  # Include /etc/hostname for centos7+
  File.open('/etc/hostname', 'w') { |file| file.write("#{VM_TYPE}.puppetlabs.vm") }
end

def edit_hosts
  cputs  "Editing /etc/hosts"
  %x{sed -i "s/127\.0\.0\.1.*/127.0.0.1 #{VM_TYPE}.puppetlabs.vm #{VM_TYPE} localhost localhost.localdomain localhost4/" /etc/hosts}
end

def configure_network
  cputs "Editing /etc/sysconfig/network"
  %x{sed -ie "s/HOSTNAME.*/HOSTNAME=#{VM_TYPE}.puppetlabs.vm/" /etc/sysconfig/network}
  %x{printf '\nsupersede domain-search "puppetlabs.vm";\n' >> /etc/dhcp/dhclient-eth0.conf}
end

################################################
#                                              #
# Helper methods for puppet-agent install task #
#                                              #
################################################

def add_yum_repo
  if File.read('/etc/redhat-release') =~ /release 6/ then
    cputs "Adding CentOS 6 yum repo"
    %x{rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm}
  else
    cputs "Adding CentOS 7 yum repo"
    %x{rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm}
  end
end

def install_puppet_agent
  %x{yum -y install puppet-agent}
end

#####################################
#                                   #
# Helper methods for the build task #
#                                   #
#####################################

def install_r10k
  cputs "Installing R10K"
  system('PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin /opt/puppetlabs/puppet/bin/gem install r10k --no-RI --no-RDOC')
end

def install_build_dependency_modules
  cputs "Running r10k Puppetfile install for build dependencies"
  system('mkdir modules')
  puppetfile_name = ENV['STABLE'] == 'true' ? 'Puppetfile.stable' : 'Puppetfile'
  system("PUPPETFILE=./#{puppetfile_name} PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin /opt/puppetlabs/puppet/bin/r10k puppetfile install")
end

def install_persistent_modules
  cputs "Running r10k Puppetfile install for persistent modules"
  system("PUPPETFILE=./Puppetfile.#{VM_TYPE} PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin /opt/puppetlabs/puppet/bin/r10k puppetfile install")
end

def apply_bootstrap
  cputs "Running puppet apply on #{VM_TYPE}.pp"
  if (VM_TYPE == 'ciab') && (OFFLINE == true) then
    system("PATH=$PATH:/opt/puppetlabs/puppet/bin #{FACTER_VAR} puppet apply --detailed-exitcodes --modulepath=./modules:/opt/puppetlabs/puppet/modules --verbose ./manifests/ciab_offline.pp")
  end
  system("PATH=$PATH:/opt/puppetlabs/puppet/bin #{FACTER_VAR} puppet apply --detailed-exitcodes --modulepath=./modules:/opt/puppetlabs/puppet/modules --verbose ./manifests/#{VM_TYPE}.pp")
  if ($?.exitstatus != 0) && ($?.exitstatus != 2)
    raise "Puppet failed with exit status #{$?.exitstatus}"
  end
end

##################################################
#                                                #
# Helper methods for the post-build cleanup task #
#                                                #
##################################################

def set_vm_version_file
  # Put version file in place on VM
  cputs "Editing /etc/vm-version"
  FileUtils.copy('./version.yaml','/etc/vm-version')
end

def set_puppet_release_file
  cputs "Editing /etc/puppetlabs-release"
  File.open('/etc/puppetlabs-release', 'w') do |file|
    file.write "#{PTBVERSION[:major]}.#{PTBVERSION[:minor]}"
  end
end

def apply_pre_manifest
  # Run pre update manifest
  cputs "Running pre update manifest"
  system('PATH=$PATH:/opt/puppetlabs/bin puppet apply --modulepath=./modules --verbose ./manifests/pre.pp')
end

def apply_cleanup_manifest
  # Run cleanup manifest
  cputs "Running cleanup manifest"
  system('PATH=$PATH:/opt/puppetlabs/bin puppet apply --modulepath=./modules --verbose ./manifests/post.pp')
end

############################
#                          #
# Internal VM build tasks  #
#                          #
############################

desc "Install puppet-agent for VM deployment"
task :standalone_puppet_agent do
  add_yum_repo
  install_puppet_agent
end

desc "Host and networking configuration needed prior to installing PE"
task :pre_install_setup do
  set_hostname
  edit_hosts
  configure_network
  download_installer unless VM_TYPE == "student"
end

desc "Install PE Master"
task :install_pe do
  install_pe
end

desc "Install and apply the bootstrap manifest corresponding to the VM type being built"
task :build do
  install_r10k
  install_build_dependency_modules
  apply_bootstrap
  install_persistent_modules if File.exist?("./Puppetfile.#{VM_TYPE}")
end

desc "Restore root password to match splash screen"
task :restore_password do
  `cat /var/local/password | passwd root --stdin`
end

desc "Update prep"
task :update_pre do
  apply_pre_manifest
end

desc "Post build cleanup"
task :post do
  set_vm_version_file
  set_puppet_release_file
  apply_cleanup_manifest
end

desc "Uninstall Puppet"
task :uninstall do
  %x{yum -y remove puppet-agent}
end

##################
#                #
# VM build tasks #
#                #
##################

desc "Print list of rake tasks"
task :default do
  system("rake -sT")  # s for silent
  cputs "NOTE: The usage of this Rakefile has changed.\n" + \
        "This is intended to be run within a blank VM to bootstrap it to the various Education VMs.\n" + \
        "To use this repo to provision a VM, refer to the files in the packer directory.\n"
end

desc "Standalone agent pre-build"
task :standalone_agent_pre => [:standalone_puppet_agent, :pre_install_setup]

desc "Standalone agent build"
task :standalone_agent_build => [:build, :post, :uninstall]

desc "Standalone agent full build"
task :standalone_agent_full => [:standalone_agent_pre, :standalone_agent_build]

desc "PE Master pre-build"
task :master_pre => [:pre_install_setup, :install_pe]

desc "PE Master build"
task :master_build => [:build, :post]

desc "PE Master full build"
task :master_full => [:master_pre, :master_build]

desc "Training VM pre-build"
task :training_pre => [:pre_install_setup]

desc "Training VM build"
task :training_build => [:build, :post]

desc "Training VM full build"
task :training_full => [:training_pre, :training_build]

desc "Classroom in a box pre build"
task :ciab_pre => [:pre_install_setup, :standalone_puppet_agent]

desc "Classroom in a box build"
task :ciab_build => [:build]

desc "Classroom in a box full build"
task :ciab_full => [:ciab_pre, :ciab_build]

desc "Update VM to latest build. Note: This will reset the root password to match the login screen"
task :update => [:update_pre, :build, :restore_password]

#########################################################
#                                                       #
# Packaging and Shipping things--Probably doesn't work! #
#                                                       #
#########################################################

## The job that calls this needs to be tied to a builder with ovftool and the int-resources NFS export mounted.
## Currently just pe-vm-builder-1
desc "Package and ship a VM"
task :ship do
  vmname = ENV['VMNAME'].split(".").first || fail("VMNAME not set, usually set via a properties file from the build job")
  cputs "Exporting #{vmname} from vSphere"
  ovapath = retrieve_vm_as_ova(vmname)
  ovaname = File.basename(ovapath)
  cputs "Exporting #{ovaname} to vSphere as \"#{VMTYPE}\""
  ship_vm_to_vmware(ovapath)
  cputs "Copying #{ovaname} to int-resources"
  ship_vm_to_dir(ovapath, "/mnt/nfs/EducationVMS/#{VMTYPE}")
  cputs "#{ovaname} is now available at http://int-resources.ops.puppetlabs.net/EducationVMS/#{VMTYPE}/#{ovaname}"
end

def gitclone(source,destination,branch,tag = nil)
  if File.directory?(destination) then
    system("cd #{destination} && (git pull origin #{branch}") or raise(Error, "Cannot pull ${source}")
  else
    system("git clone #{source} #{destination} -b #{branch}") or raise(Error, "Cannot clone #{source}")
    system("cd #{destination} && git checkout #{tag}") if tag
  end
end

## Prompt for a response if a given ENV variable isn't set.
#
# args:
#   message:  the message you want displayed
#   varname:  the name of the environment variable to look for
#
# usage: update = env_prompt('Increment the release version? [Y/n]: ', 'RELEASE')
def env_prompt(message, varname)
  if ENV.include? varname
    ans = ENV[varname]
  else
    cprint message
    ans = STDIN.gets.strip
  end
  return ans
end

def verify_download(download, signature)
  crypto = GPGME::Crypto.new
  sign = GPGME::Data.new(File.open(signature))
  file_to_check = GPGME::Data.new(File.open(download))
  crypto.verify(sign, :signed_text => file_to_check, :always_trust => true) do |signature|
   puts "Valid!" if signature.valid?
  end
end

def retrieve_vm_as_ova(vmname)
  ovaname = "puppet-#{PE_VERSION}-#{VMTYPE}vm-#{PTBVERSION[:major]}.#{PTBVERSION[:minor]}"
  vcenter_config = File.join(CACHEDIR, ".vmwarecfg.yml") || ENV["VCENTER_CONFIG"]
  vcenter_settings = YAML::load(File.open(vcenter_config))
  FileUtils.rm_rf(OVFDIR) if File.directory?(OVFDIR)
  FileUtils.mkdir_p(OVFDIR)
  Dir.chdir(BUILDDIR) do
    verbose(false) do
      sh(%Q</usr/bin/ovftool --noSSLVerify --targetType=OVA --compress=9 --name=#{ovaname} --powerOffSource vi://#{vcenter_settings['username']}\\@puppetlabs.com:#{vcenter_settings['password']}@vmware-vc2.ops.puppetlabs.net/opdx2/vm/vmpooler/centos-6-i386/#{vmname}  #{OVFDIR}/>)
    end
  end
  File.join(OVFDIR, ovaname) + ".ova"
end

def ship_vm_to_vmware(vmpath)
  require 'rbvmomi'
  vcenter_config = File.join(CACHEDIR, ".vmwarecfg.yml") || ENV["VCENTER_CONFIG"]
  vcenter_settings = YAML::load(File.open(vcenter_config))
  Dir.chdir(BUILDDIR) do
    verbose(false) do
      sh(%Q</usr/bin/ovftool --noSSLVerify --network='delivery' --datastore='instance1' -o --powerOffTarget -n=#{VMTYPE} #{vmpath} vi://#{vcenter_settings['username']}\@puppetlabs.com:#{vcenter_settings['password']}@vmware-vc2.ops.puppetlabs.net/opdx2/host/mac1>)
    end
  end
  vim = RbVmomi::VIM.connect(
    :host => 'vmware-vc2.ops.puppetlabs.net',
    :user => "#{vcenter_settings['username']}\@puppetlabs.com",
    :password => "#{vcenter_settings['password']}",
    :insecure => 'true')
  rootFolder = vim.serviceInstance.content.rootFolder
  dc = rootFolder.childEntity.grep(RbVmomi::VIM::Datacenter).find { |x| x.name == "opdx2" } or fail "datacenter not found"
  vm = dc.find_vm(VMTYPE) or fail "VM not found"
  cputs "Powering on VM"
  vm.PowerOnVM_Task.wait_for_completion
  vm_ip = nil
  5.times do
    vm_ip = vm.guest_ip
    cputs "#{VMTYPE} IP is #{vm_ip}"
    break unless vm_ip == nil
    sleep 60
  end
  fail "Did not receive an IP address" if vm_ip == nil
end

def ship_vm_to_dir(vmpath, destination)
  FileUtils.cp(vmpath, destination)
  FileUtils.chmod(0644, File.join(destination, File.basename(vmpath)))
end

# vim: set sw=2 sts=2 et tw=80 :
